<?php
/*
	
	v0.0.1alpha : NP_znBackupbackup.phphttp://japan.nucleuscms.org/bb/viewtopic.php?t=1596
*/
class NP_znBackupNeo extends NucleusPlugin
{
	function getName()           { return 'znBackupNeo'; }
	function getURL()            { return 'http://wa.otesei.com/NP_znBackupNeo'; }
	function supportsFeature($w) { return ($w == 'SqlTablePrefix') ? 1 : 0; }
	function getVersion()
	{
		return '0.0.2alpha';
	}
	function getAuthor()
	{
		$this->languageInclude();
		return ''._ZNBACKUPNEO1.'';
	}
	function getDescription()
	{
		$this->languageInclude();
		return ''._ZNBACKUPNEO2.'';
	}
	function getEventList()
	{
		return array(
			'PostPluginOptionsUpdate', //vc
			'PostSkinParse'
		);
	}
	function languageInclude()
	{
		// include language file for this plugin
		$language = ereg_replace( '[\\|/]', '', getLanguageName());
		$incFile  = (file_exists($this->getDirectory().$language.'.php')) ? $language : 'english';
		include_once($this->getDirectory().$incFile.'.php');
		$this->language = $incFile;
	}
	function init()
	{
	}
	//
	//
	//
	function install()
	{
		global $DIR_PLUGINS;
		$this->languageInclude();
		$backupdir = $DIR_PLUGINS . 'znbackupneo/backup/';
		$this->createOption('schedule', ''._ZNBACKUPNEO3.' (2005-11-14 02:00:00)', 'text', '2030-01-01 02:00:00');
		$this->createOption('b_time'  , ''._ZNBACKUPNEO4.'', 'text', '24');
		$this->createOption('d_path'  , ''._ZNBACKUPNEO5.'', 'text', $backupdir);
		$this->createOption('f_zlib'  , ''._ZNBACKUPNEO6.'', 'yesno', 'yes');
		$this->createOption('t_size'  , ''._ZNBACKUPNEO7.'', 'text', '10');
		$this->createOption('a_mail'  , ''._ZNBACKUPNEO8.'', 'text', '');
		$this->createOption('f_atta'  , ''._ZNBACKUPNEO9.'', 'yesno', 'yes');
		$this->createOption('f_all'   , ''._ZNBACKUPNEO10.'Nucleus'._ZNBACKUPNEO11.'', 'yesno', 'yes');
		$this->createOption('f_tabl'  , ''._ZNBACKUPNEO12.'', 'yesno', 'yes');
		$this->createOption('verCheck', ''._ZNBACKUPNEO13.'', 'yesno', 'no'); //version check //vc
		
		global $manager; //vc
		$manager->subscriptions['AdminPrePageFoot'][] = postVar('filename'); //vc
	}
	//
	//
	//
	function event_PostPluginOptionsUpdate($data)
	{
		if ($data['context'] != 'global' || $data['plugid'] != $this->GetID()) return;
		
		if ($this->getOption('verCheck') == 'yes') { //vc
			global $manager; //vc
			$this->setOption('verCheck', 'no'); //vc
			$this->plugName = quickQuery('SELECT pfile result FROM '.sql_table('plugin').' WHERE pid='.intval($this->getID())); //vc
			$manager->subscriptions['AdminPrePageFoot'][] = $this->plugName; //vc
		}
	}
	function event_AdminPrePageFoot() //vc
	{
		$this->plugName = (postVar('filename')) ? postVar('filename') : $this->plugName; //vc
		$result         = $this->verCheck(); //vc
		echo '<span style="color: #'.(($result['version'] == $this->getVersion()) ? '00f' : 'f00').'">'.htmlspecialchars($result['message'], ENT_QUOTES).'</span>'; //vc
	}
	//
	//
	//
	function event_PostSkinParse(&$skindata)
	{
		$schedule  = $this->getOption('schedule');                                                          //
		$presently = date('Y-m-d H:i:s');                                                                   //
		if ($presently > $schedule){                                                                        //String
			sscanf($schedule , '%d-%d-%d %d:00:00', $s_y, $s_m, $s_d, $s_h);
			sscanf($presently, '%d-%d-%d %d:%d:%d', $p_y, $p_m, $p_d, $p_h, $p_i, $p_s);
			$b_time       = (int) $this->getOption('b_time');                                                 //
			$passageTime  = (mktime($p_h,$p_i,$p_s,$p_m,$p_d,$p_y) - mktime($s_h,0,0,$s_m,$s_d,$s_y)) / 3600; //
			$multiple     = ceil($passageTime / $b_time) * $b_time;                                           //
			$nextSchedule = date('Y-m-d H:i:s', mktime(($s_h + $multiple), 0, 0, $s_m, $s_d, $s_y));
			$this->setOption('schedule', $nextSchedule);
			
			$this->doBackup();
		}
	}
	//
	//
	//
	function doBackup()
	{
		global $manager, $blogid;
		$this->languageInclude();
		
		//zlib
		$f_zlib = (extension_loaded("zlib")) ? $this->getOption('f_zlib') : "no";
		
		mb_internal_encoding(_CHARSET); //Nucleus Adminsql
		@set_time_limit(1200);
		
		include_once($this->getDirectory().'DBBACKUP.php');
		$tables   = $this->getBackupTableList();
		$dbbackup = new DBBACKUP();
		$contents = $dbbackup->dumpBackup($tables); //$contents
		
		//------------------------------------------------------------[B]blocklibs/backup.php
		// dump header
		$e.= "#\n";
		$e.= "# This is a backup file generated by NP_znBackupNeo \n";
		$e.= "# http://www.nucleuscms.org/\n";
		$e.= "#\n";
		$e.= "# backup-date: " .  gmdate("d-m-Y H:i:s", time()) . " GMT\n";
		global $nucleus;
		$e.= "# Nucleus CMS version: " . $nucleus['version'] . "\n";	
		$e.= "#\n";
		$e.= "# WARNING: Only try to restore on servers running the exact same version of Nucleus\n";
		$e.= "#\n";
		//------------------------------------------------------------[/B]
		$contents = $e.$contents;
		
		//
		if ($f_zlib == "yes"){
			$filename = $this->getBlogShortNameFromID($blogid).'_backupNeo'.strftime("%Y%m%d%H", time()).".sql.gz";
			$errorMsg = ''._ZNBACKUPNEO14.''.$this->getOption('d_path').$filename;
			$fp       = @gzopen($this->getOption('d_path').$filename,'w9') or $this->fopenError($errorMsg);
			gzwrite($fp, $contents);
			gzclose($fp);
		} else {
			$filename = $this->getBlogShortNameFromID($blogid).'_backupNeo'.strftime("%Y%m%d%H", time()).".sql";
			$errorMsg = ''._ZNBACKUPNEO15.''.$this->getOption('d_path').$filename;
			$fp       = @fopen($this->getOption('d_path').$filename,'w') or $this->fopenError($errorMsg);
			flock($fp, LOCK_EX);
			fputs($fp, $contents);
			flock($fp, LOCK_UN);
			fclose($fp);
		}
		
		$msg  = $this->refresh();
		$msg .= ($this->getOption('f_tabl') == "yes") ? $this->plug_table_check() : ""._ZNBACKUPNEO16."\n";
		$msg  = (!$msg) ? ""._ZNBACKUPNEO17."\n" : $msg;
		if ($this->getOption('f_atta') == "no"){                                      //
			$this->attach_flag = false;
			$msg .= ""._ZNBACKUPNEO18."\n";
		}
		if (strlen($this->getOption('a_mail')) > 0) $this->send($filename, $msg);
	}
	//
	//
	//
	function getBackupTableList()
	{
		global $manager, $MYSQL_DATABASE, $MYSQL_PREFIX;
		$tables = array();
		if ($this->getOption('f_all') != 'yes')
		{
			//
			$pluginsTables = array();
			$res = sql_query('SELECT pfile FROM '.sql_table('plugin'));
			while ($plugName = mysql_fetch_object($res)) {
				$plug =& $manager->getPlugin($plugName->pfile);
				if ($plug) $pluginsTables = array_merge($pluginsTables, $plug->getTableList());
			}
			
			//
			$standardTables = array();
			$qid = mysql_query("SHOW TABLES FROM ".addslashes($MYSQL_DATABASE)." LIKE '".addslashes($MYSQL_PREFIX)."nucleus_%'");
			while ($row = mysql_fetch_array($qid)) {
				//$row[0]Windows
				//Nucleus
				if (!$this->sub_array_search($row[0], $pluginsTables)) $standardTables[] = $row[0];
			}
			
			//
			$tables = array_merge($standardTables, $pluginsTables);
			
			// remove duplicates
			$tables = array_unique($tables);
		} else {
			$qid = mysql_query("SHOW TABLES FROM ".addslashes($MYSQL_DATABASE));
			while ($row = mysql_fetch_array($qid)) $tables[] = $row[0];
		}
		
		return $tables;
	}
	//
	//
	//
	function fopenError($msg)
	{
		$this->attach_flag = false;
		if (strlen($this->getOption('a_mail')) > 0) $this->send('', $msg);
	}
	//
	//idglobalfunctions
	//
	function getBlogShortNameFromID($id)
	{
		return quickQuery('SELECT bshortname as result FROM '.sql_table('blog').' WHERE bnumber='.intval($id));
	}
	//
	//
	//
	function refresh()
	{
		$t_size    = (int) $this->getOption('t_size');
		$dir_size  = 0;
		$file_time = array();
		$dir_name  = dir($this->getOption('d_path'));
		$msg       = "";
		
		//
		while ($file_name = $dir_name->read()){
			if (!is_dir($this->getOption('d_path').$file_name)){
				$dir_size += (filesize($this->getOption('d_path').$file_name) / 1048576); //
				$file_time[$file_name] = filemtime($this->getOption('d_path').$file_name);
			}
		}
		//
		asort($file_time);                                                            //
		reset($file_time);
		$over_size = $dir_size - $t_size;
		if ($over_size > 0){
			foreach ($file_time as $key => $value){
				$over_size -= filesize($this->getOption('d_path').$key) / 1048576;
				if (unlink($this->getOption('d_path').$key)){
					$msg .= $key.""._ZNBACKUPNEO19."\n";
				} else {
					$msg .= $key.""._ZNBACKUPNEO20."\n";
				}
				if ($over_size <= 0) break;
			}
		}
		//1
		$dir_size  = 0;
		$dir_name  = dir($this->getOption('d_path'));
		while ($file_name = $dir_name->read()){
			if (!is_dir($this->getOption('d_path').$file_name)){
				$dir_size += (filesize($this->getOption('d_path').$file_name) / 1048576); //
			}
		}
		$dir_name->close();
		if ($dir_size == 0){                                                          //
			$msg .= ""._ZNBACKUPNEO21."\n";
			$this->attach_flag = false;
		} else $this->attach_flag = true;
		return $msg;
	}
	
	//
	//
	//
	function send($filename, $message)
	{
		global $CONF;
		mb_internal_encoding("JIS");
		$message    = "[".getBlogNameFromID($CONF["DefaultBlog"])."]\n\n".$message."\n\n";
		$message   .= "-------------------------------------------\n";
		$message   .= "NP_znBackupNeo v".$this->getVersion()."\n";
		$message   .= "http://wa.otesei.com/NP_znBackupNeo\n";
		$message   .= "-------------------------------------------\n";
		$message    = mb_convert_encoding($message, "JIS", _CHARSET);
		$subject    = mb_convert_encoding("NP_znBackupNeo"._ZNBACKUPNEO22."", "JIS", _CHARSET);
		$subject    = mb_encode_mimeheader($subject, "ISO-2022-JP", "B");
		$from       = $this->getOption('a_mail');
		$to         = $this->getOption('a_mail');
		$boundary   = "-*-*-*-*-*-*-*-*-Boundary_".uniqid("b");
		$additional = "From: ".$from."\n";
		
		if( $this->attach_flag ) {
			$file_path = $this->getOption('d_path').$filename;
			$fp        = fopen($file_path, "r") or die("error");
			$bin       = fread($fp, filesize($file_path));
			$additional .= "MIME-Version: 1.0\n";
			$additional .= "Content-Type: multipart/mixed; boundary=\"".$boundary."\"\n";
			$body  = "--".$boundary."\n";
			$body .= "Content-Type: text/plain; charset=\"ISO-2022-JP\"\n";
			$body .= "Content-Transfer-Encoding: 7bit\n";
			$body .= "\n";
			$body .= $message."\n";
			$body .= "--" . $boundary."\n";
			$body .= "Content-Type: application/octet-stream; name=\"".$filename."\"\n";
			$body .= "Content-Transfer-Encoding: base64\n";
			$body .= "Content-Disposition: attachment; filename=\"".$filename."\"\n";
			$body .= "\n";
			$body .= chunk_split(base64_encode($bin));
			$body .= "\n";
			$body .= "--" .$boundary ."--\n";
		} else $body = $message."\n";
		
		if (mail($to, $subject, $body, $additional)){
			//echo "OK<br />";
		} else {
			//echo "NG<br />";
		}
	}
	//
	//getTableList
	//
	function plug_table_check()
	{
		global $MYSQL_DATABASE, $MYSQL_PREFIX, $DIR_PLUGINS, $manager;
		$tables        = array();
		$tb_names      = array();
		$warning_table = array();
		$ret           = "";
		$res = sql_query('SELECT pfile FROM '.sql_table('plugin'));
		while ($plugName = mysql_fetch_object($res)) {
			$plug =& $manager->getPlugin($plugName->pfile);
			if ($plug) $tables = array_merge($tables, $plug->getTableList());
		}
		//
		$qid = mysql_query("SHOW TABLES FROM ".addslashes($MYSQL_DATABASE));
		while ($row = mysql_fetch_array($qid)) $tb_names[] = $row[0];
		//$tables$tb_names
		foreach ($tables as $value_plg){
			if ( !$this->sub_array_search($value_plg, $tb_names) ) array_push($warning_table, $value_plg); //
		}
		//getTableList
		if ($warning_table){
			$ret .= ""._ZNBACKUPNEO23."!!\n"._ZNBACKUPNEO24."\n";
			foreach ($warning_table as $value_plg) $ret .= "    ".$value_plg."\n";
		}
		return $ret;
	}
	//
	//array_searchWindows
	//return true  : 
	//return false : 
	//
	function sub_array_search($str, $arr)
	{
		$ret = false;
		foreach ($arr as $val){
			if (strtolower($str) == strtolower($val)){ //
				$ret = true;
				break;
			}
		}
		return $ret;
	}
	//
	//Version Check Service(XML-RPC)
	//
	function verCheck()
	{
		global $DIR_LIBS;
		if (!class_exists(xmlrpcmsg)) include($DIR_LIBS . "xmlrpc.inc.php");
		$service = new xmlrpc_client('/xmlrpc/verCheckService.php', 'wa.otesei.com', 80);
		$para    = array(new xmlrpcval($this->plugName, 'string'), new xmlrpcval($this->getVersion(), 'string'));
		$res     = $service->send(new xmlrpcmsg('versioncheck.ping', $para), 20);
		if ($res && !$res->faultCode()){
			$struct  = $res->value();
			$version = $struct->structmem('version');
			$message = $struct->structmem('message');
			return array('version' => $version->scalarval(), 'message' => $message->scalarval());
		}
		return array('version' => '', 'message' => 'Version Check :: Error');
	}
}
?>